{"ast":null,"code":"import { Splitter, hasBgRendering, createFormatter, ViewContextType, ContentContainer, BaseComponent, DateComponent, diffDays, buildNavLinkAttrs, WeekNumberContainer, getStickyHeaderDates, ViewContainer, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorContainer, renderScrollShim, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, MoreLinkContainer, SegHierarchy, groupIntersectingEntries, binarySearch, getEntrySpanEnd, buildEntryKey, StandardEvent, memoize, sortEventSegs, DayCellContainer, hasCustomDayCellContent, getSegMeta, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, renderFill, addDurations, multiplyDuration, wholeDivideDurations, Slicer, intersectRanges, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel } from '@fullcalendar/core/internal.js';\nimport { createElement, createRef, Fragment } from '@fullcalendar/core/preact.js';\nimport { DayTable } from '@fullcalendar/daygrid/internal.js';\nclass AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  }\n  getKeysForDateSpan(dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    }\n    return ['timed'];\n  }\n  getKeysForEventDef(eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    }\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    }\n    return ['allDay'];\n  }\n}\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short'\n});\nfunction TimeColsAxisCell(props) {\n  let classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-label', props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'];\n  return createElement(ViewContextType.Consumer, null, context => {\n    if (!props.isLabeled) {\n      return createElement(\"td\", {\n        className: classNames.join(' '),\n        \"data-time\": props.isoTimeStr\n      });\n    }\n    let {\n      dateEnv,\n      options,\n      viewApi\n    } = context;\n    let labelFormat =\n    // TODO: fully pre-parse\n    options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) : createFormatter(options.slotLabelFormat);\n    let renderProps = {\n      level: 0,\n      time: props.time,\n      date: dateEnv.toDate(props.date),\n      view: viewApi,\n      text: dateEnv.format(props.date, labelFormat)\n    };\n    return createElement(ContentContainer, {\n      elTag: \"td\",\n      elClasses: classNames,\n      elAttrs: {\n        'data-time': props.isoTimeStr\n      },\n      renderProps: renderProps,\n      generatorName: \"slotLabelContent\",\n      generator: options.slotLabelContent || renderInnerContent,\n      classNameGenerator: options.slotLabelClassNames,\n      didMount: options.slotLabelDidMount,\n      willUnmount: options.slotLabelWillUnmount\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n    }, createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-timegrid-slot-label-cushion', 'fc-scrollgrid-shrink-cushion']\n    })));\n  });\n}\nfunction renderInnerContent(props) {\n  return props.text;\n}\nclass TimeBodyAxis extends BaseComponent {\n  render() {\n    return this.props.slatMetas.map(slatMeta => createElement(\"tr\", {\n      key: slatMeta.key\n    }, createElement(TimeColsAxisCell, Object.assign({}, slatMeta))));\n  }\n}\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'short'\n});\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nclass TimeColsView extends DateComponent {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n    this.headerElRef = createRef();\n    this.rootElRef = createRef();\n    this.scrollerElRef = createRef();\n    this.state = {\n      slatCoords: null\n    };\n    this.handleScrollTopRequest = scrollTop => {\n      let scrollerEl = this.scrollerElRef.current;\n      if (scrollerEl) {\n        // TODO: not sure how this could ever be null. weirdness with the reducer\n        scrollerEl.scrollTop = scrollTop;\n      }\n    };\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    this.renderHeadAxis = function (rowKey) {\n      let frameHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      let {\n        options\n      } = _this.context;\n      let {\n        dateProfile\n      } = _this.props;\n      let range = dateProfile.renderRange;\n      let dayCnt = diffDays(range.start, range.end);\n      // only do in day views (to avoid doing in week views that dont need it)\n      let navLinkAttrs = dayCnt === 1 ? buildNavLinkAttrs(_this.context, range.start, 'week') : {};\n      if (options.weekNumbers && rowKey === 'day') {\n        return createElement(WeekNumberContainer, {\n          elTag: \"th\",\n          elClasses: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'],\n          elAttrs: {\n            'aria-hidden': true\n          },\n          date: range.start,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }, InnerContent => createElement(\"div\", {\n          className: ['fc-timegrid-axis-frame', 'fc-scrollgrid-shrink-frame', 'fc-timegrid-axis-frame-liquid'].join(' '),\n          style: {\n            height: frameHeight\n          }\n        }, createElement(InnerContent, {\n          elTag: \"a\",\n          elClasses: ['fc-timegrid-axis-cushion', 'fc-scrollgrid-shrink-cushion', 'fc-scrollgrid-sync-inner'],\n          elAttrs: navLinkAttrs\n        })));\n      }\n      return createElement(\"th\", {\n        \"aria-hidden\": true,\n        className: \"fc-timegrid-axis\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-axis-frame\",\n        style: {\n          height: frameHeight\n        }\n      }));\n    };\n    /* Table Component Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n    // but DayGrid still needs to have classNames on inner elements in order to measure.\n    this.renderTableRowAxis = rowHeight => {\n      let {\n        options,\n        viewApi\n      } = this.context;\n      let renderProps = {\n        text: options.allDayText,\n        view: viewApi\n      };\n      return (\n        // TODO: make reusable hook. used in list view too\n        createElement(ContentContainer, {\n          elTag: \"td\",\n          elClasses: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'],\n          elAttrs: {\n            'aria-hidden': true\n          },\n          renderProps: renderProps,\n          generatorName: \"allDayContent\",\n          generator: options.allDayContent || renderAllDayInner,\n          classNameGenerator: options.allDayClassNames,\n          didMount: options.allDayDidMount,\n          willUnmount: options.allDayWillUnmount\n        }, InnerContent => createElement(\"div\", {\n          className: ['fc-timegrid-axis-frame', 'fc-scrollgrid-shrink-frame', rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''].join(' '),\n          style: {\n            height: rowHeight\n          }\n        }, createElement(InnerContent, {\n          elTag: \"span\",\n          elClasses: ['fc-timegrid-axis-cushion', 'fc-scrollgrid-shrink-cushion', 'fc-scrollgrid-sync-inner']\n        })))\n      );\n    };\n    this.handleSlatCoords = slatCoords => {\n      this.setState({\n        slatCoords\n      });\n    };\n  }\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n  renderSimpleLayout(headerRowContent, allDayContent, timeContent) {\n    let {\n      context,\n      props\n    } = this;\n    let sections = [];\n    let stickyHeaderDates = getStickyHeaderDates(context.options);\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: {\n          content: allDayContent\n        }\n      });\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent:\n        // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }\n    });\n    return createElement(ViewContainer, {\n      elRef: this.rootElRef,\n      elClasses: ['fc-timegrid'],\n      viewSpec: context.viewSpec\n    }, createElement(SimpleScrollGrid, {\n      liquid: !props.isHeightAuto && !props.forPrint,\n      collapsibleWidth: props.forPrint,\n      cols: [{\n        width: 'shrink'\n      }],\n      sections: sections\n    }));\n  }\n  renderHScrollLayout(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n    let {\n      context,\n      props\n    } = this;\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    let sections = [];\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: arg => createElement(\"tr\", {\n            role: \"presentation\"\n          }, this.renderHeadAxis('day', arg.rowSyncHeights[0]))\n        }, {\n          key: 'cols',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: contentArg => createElement(\"tr\", {\n            role: \"presentation\"\n          }, this.renderTableRowAxis(contentArg.rowSyncHeights[0]))\n        }, {\n          key: 'cols',\n          content: allDayContent\n        }]\n      });\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent:\n        // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          colSpan: 2,\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n    let isNowIndicator = context.options.nowIndicator;\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [{\n        key: 'axis',\n        content: arg =>\n        // TODO: make this now-indicator arrow more DRY with TimeColsContent\n        createElement(\"div\", {\n          className: \"fc-timegrid-axis-chunk\"\n        }, createElement(\"table\", {\n          \"aria-hidden\": true,\n          style: {\n            height: arg.expandRows ? arg.clientHeight : ''\n          }\n        }, arg.tableColGroupNode, createElement(\"tbody\", null, createElement(TimeBodyAxis, {\n          slatMetas: slatMetas\n        }))), createElement(\"div\", {\n          className: \"fc-timegrid-now-indicator-container\"\n        }, createElement(NowTimer, {\n          unit: isNowIndicator ? 'minute' : 'day' /* hacky */\n        }, nowDate => {\n          let nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n          if (typeof nowIndicatorTop === 'number') {\n            return createElement(NowIndicatorContainer, {\n              elClasses: ['fc-timegrid-now-indicator-arrow'],\n              elStyle: {\n                top: nowIndicatorTop\n              },\n              isAxis: true,\n              date: nowDate\n            });\n          }\n          return null;\n        })))\n      }, {\n        key: 'cols',\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }]\n    });\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'axis',\n          content: renderScrollShim\n        }, {\n          key: 'cols',\n          content: renderScrollShim\n        }]\n      });\n    }\n    return createElement(ViewContainer, {\n      elRef: this.rootElRef,\n      elClasses: ['fc-timegrid'],\n      viewSpec: context.viewSpec\n    }, createElement(ScrollGrid, {\n      liquid: !props.isHeightAuto && !props.forPrint,\n      collapsibleWidth: false,\n      colGroups: [{\n        width: 'shrink',\n        cols: [{\n          width: 'shrink'\n        }]\n      }, {\n        cols: [{\n          span: colCnt,\n          minWidth: dayMinWidth\n        }]\n      }],\n      sections: sections\n    }));\n  }\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n  getAllDayMaxEventProps() {\n    let {\n      dayMaxEvents,\n      dayMaxEventRows\n    } = this.context.options;\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n      // is auto?\n      dayMaxEvents = undefined;\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n    }\n\n    return {\n      dayMaxEvents,\n      dayMaxEventRows\n    };\n  }\n}\nfunction renderAllDayInner(renderProps) {\n  return renderProps.text;\n}\nclass TimeColsSlatsCoords {\n  constructor(positions, dateProfile, slotDuration) {\n    this.positions = positions;\n    this.dateProfile = dateProfile;\n    this.slotDuration = slotDuration;\n  }\n  safeComputeTop(date) {\n    let {\n      dateProfile\n    } = this;\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date);\n      let timeMs = date.valueOf() - startOfDayDate.valueOf();\n      if (timeMs >= asRoughMs(dateProfile.slotMinTime) && timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n        return this.computeTimeTop(createDuration(timeMs));\n      }\n    }\n    return null;\n  }\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  }\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration) {\n    let {\n      positions,\n      dateProfile\n    } = this;\n    let len = positions.els.length;\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration);\n    let slatIndex;\n    let slatRemainder;\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage);\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1);\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex;\n    return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n  }\n}\nclass TimeColsSlatsBody extends BaseComponent {\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      options\n    } = context;\n    let {\n      slatElRefs\n    } = props;\n    return createElement(\"tbody\", null, props.slatMetas.map((slatMeta, i) => {\n      let renderProps = {\n        time: slatMeta.time,\n        date: context.dateEnv.toDate(slatMeta.date),\n        view: context.viewApi\n      };\n      return createElement(\"tr\", {\n        key: slatMeta.key,\n        ref: slatElRefs.createRef(slatMeta.key)\n      }, props.axis && createElement(TimeColsAxisCell, Object.assign({}, slatMeta)), createElement(ContentContainer, {\n        elTag: \"td\",\n        elClasses: ['fc-timegrid-slot', 'fc-timegrid-slot-lane', !slatMeta.isLabeled && 'fc-timegrid-slot-minor'],\n        elAttrs: {\n          'data-time': slatMeta.isoTimeStr\n        },\n        renderProps: renderProps,\n        generatorName: \"slotLaneContent\",\n        generator: options.slotLaneContent,\n        classNameGenerator: options.slotLaneClassNames,\n        didMount: options.slotLaneDidMount,\n        willUnmount: options.slotLaneWillUnmount\n      }));\n    }));\n  }\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\nclass TimeColsSlats extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.rootElRef = createRef();\n    this.slatElRefs = new RefMap();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    return createElement(\"div\", {\n      ref: this.rootElRef,\n      className: \"fc-timegrid-slots\"\n    }, createElement(\"table\", {\n      \"aria-hidden\": true,\n      className: context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */, createElement(TimeColsSlatsBody, {\n      slatElRefs: this.slatElRefs,\n      axis: props.axis,\n      slatMetas: props.slatMetas\n    })));\n  }\n  componentDidMount() {\n    this.updateSizing();\n  }\n  componentDidUpdate() {\n    this.updateSizing();\n  }\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null);\n    }\n  }\n  updateSizing() {\n    let {\n      context,\n      props\n    } = this;\n    if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current;\n      if (rootEl.offsetHeight) {\n        // not hidden by css\n        props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n      }\n    }\n  }\n}\nfunction collectSlatEls(elMap, slatMetas) {\n  return slatMetas.map(slatMeta => elMap[slatMeta.key]);\n}\nfunction splitSegsByCol(segs, colCnt) {\n  let segsByCol = [];\n  let i;\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([]);\n  }\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n  }\n  return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n  let byRow = [];\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg);\n    }\n  }\n  return byRow;\n}\nclass TimeColMoreLink extends BaseComponent {\n  render() {\n    let {\n      props\n    } = this;\n    return createElement(MoreLinkContainer, {\n      elClasses: ['fc-timegrid-more-link'],\n      elStyle: {\n        top: props.top,\n        bottom: props.bottom\n      },\n      allDayDate: null,\n      moreCnt: props.hiddenSegs.length,\n      allSegs: props.hiddenSegs,\n      hiddenSegs: props.hiddenSegs,\n      extraDateSpan: props.extraDateSpan,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      popoverContent: () => renderPlainFgSegs(props.hiddenSegs, props),\n      defaultGenerator: renderMoreLinkInner\n    }, InnerContent => createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-timegrid-more-link-inner', 'fc-sticky']\n    }));\n  }\n}\nfunction renderMoreLinkInner(props) {\n  return props.shortText;\n}\n\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n  let hierarchy = new SegHierarchy();\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder;\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt;\n  }\n  let hiddenEntries = hierarchy.addSegs(segInputs);\n  let hiddenGroups = groupIntersectingEntries(hiddenEntries);\n  let web = buildWeb(hierarchy);\n  web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n  let segRects = webToRects(web);\n  return {\n    segRects,\n    hiddenGroups\n  };\n}\nfunction buildWeb(hierarchy) {\n  const {\n    entriesByLevel\n  } = hierarchy;\n  const buildNode = cacheable((level, lateral) => level + ':' + lateral, (level, lateral) => {\n    let siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n    let nextLevelRes = buildNodes(siblingRange, buildNode);\n    let entry = entriesByLevel[level][lateral];\n    return [Object.assign(Object.assign({}, entry), {\n      nextLevelNodes: nextLevelRes[0]\n    }), entry.thickness + nextLevelRes[1] // the pressure builds\n    ];\n  });\n\n  return buildNodes(entriesByLevel.length ? {\n    level: 0,\n    lateralStart: 0,\n    lateralEnd: entriesByLevel[0].length\n  } : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n  if (!siblingRange) {\n    return [[], 0];\n  }\n  let {\n    level,\n    lateralStart,\n    lateralEnd\n  } = siblingRange;\n  let lateral = lateralStart;\n  let pairs = [];\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral));\n    lateral += 1;\n  }\n  pairs.sort(cmpDescPressures);\n  return [pairs.map(extractNode), pairs[0][1] // first item's pressure\n  ];\n}\n\nfunction cmpDescPressures(a, b) {\n  return b[1] - a[1];\n}\nfunction extractNode(a) {\n  return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n  let {\n    levelCoords,\n    entriesByLevel\n  } = hierarchy;\n  let subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n  let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n  let levelCnt = levelCoords.length;\n  let level = subjectLevel;\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing\n  for (; level < levelCnt; level += 1) {\n    let entries = entriesByLevel[level];\n    let entry;\n    let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd);\n    let lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n    let lateralEnd = lateralStart;\n    while (\n    // loop through entries that horizontally intersect\n    (entry = entries[lateralEnd]) &&\n    // but not past the whole seg list\n    entry.span.start < subjectEntry.span.end) {\n      lateralEnd += 1;\n    }\n    if (lateralStart < lateralEnd) {\n      return {\n        level,\n        lateralStart,\n        lateralEnd\n      };\n    }\n  }\n  return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n  const stretchNode = cacheable((node, startCoord, prevThickness) => buildEntryKey(node), (node, startCoord, prevThickness) => {\n    let {\n      nextLevelNodes,\n      thickness\n    } = node;\n    let allThickness = thickness + prevThickness;\n    let thicknessFraction = thickness / allThickness;\n    let endCoord;\n    let newChildren = [];\n    if (!nextLevelNodes.length) {\n      endCoord = totalThickness;\n    } else {\n      for (let childNode of nextLevelNodes) {\n        if (endCoord === undefined) {\n          let res = stretchNode(childNode, startCoord, allThickness);\n          endCoord = res[0];\n          newChildren.push(res[1]);\n        } else {\n          let res = stretchNode(childNode, endCoord, 0);\n          newChildren.push(res[1]);\n        }\n      }\n    }\n    let newThickness = (endCoord - startCoord) * thicknessFraction;\n    return [endCoord - newThickness, Object.assign(Object.assign({}, node), {\n      thickness: newThickness,\n      nextLevelNodes: newChildren\n    })];\n  });\n  return topLevelNodes.map(node => stretchNode(node, 0, 0)[1]);\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n  let rects = [];\n  const processNode = cacheable((node, levelCoord, stackDepth) => buildEntryKey(node), (node, levelCoord, stackDepth) => {\n    let rect = Object.assign(Object.assign({}, node), {\n      levelCoord,\n      stackDepth,\n      stackForward: 0\n    });\n    rects.push(rect);\n    return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n  });\n  function processNodes(nodes, levelCoord, stackDepth) {\n    let stackForward = 0;\n    for (let node of nodes) {\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n    }\n    return stackForward;\n  }\n  processNodes(topLevelNodes, 0, 0);\n  return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n  const cache = {};\n  return function () {\n    let key = keyFunc(...arguments);\n    return key in cache ? cache[key] : cache[key] = workFunc(...arguments);\n  };\n}\nfunction computeSegVCoords(segs, colDate) {\n  let slatCoords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let eventMinHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let vcoords = [];\n  if (slatCoords) {\n    for (let i = 0; i < segs.length; i += 1) {\n      let seg = segs[i];\n      let spanStart = slatCoords.computeDateTop(seg.start, colDate);\n      let spanEnd = Math.max(spanStart + (eventMinHeight || 0),\n      // :(\n      slatCoords.computeDateTop(seg.end, colDate));\n      vcoords.push({\n        start: Math.round(spanStart),\n        end: Math.round(spanEnd) //\n      });\n    }\n  }\n\n  return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords,\n// might not have for every seg\neventOrderStrict, eventMaxStack) {\n  let segInputs = [];\n  let dumbSegs = []; // segs without coords\n  for (let i = 0; i < segs.length; i += 1) {\n    let vcoords = segVCoords[i];\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords\n      });\n    } else {\n      dumbSegs.push(segs[i]);\n    }\n  }\n  let {\n    segRects,\n    hiddenGroups\n  } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack);\n  let segPlacements = [];\n  for (let segRect of segRects) {\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect\n    });\n  }\n  for (let dumbSeg of dumbSegs) {\n    segPlacements.push({\n      seg: dumbSeg,\n      rect: null\n    });\n  }\n  return {\n    segPlacements,\n    hiddenGroups\n  };\n}\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false\n});\nclass TimeColEvent extends BaseComponent {\n  render() {\n    return createElement(StandardEvent, Object.assign({}, this.props, {\n      elClasses: ['fc-timegrid-event', 'fc-v-event', this.props.isShort && 'fc-timegrid-event-short'],\n      defaultTimeFormat: DEFAULT_TIME_FORMAT\n    }));\n  }\n}\nclass TimeCol extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.sortEventSegs = memoize(sortEventSegs);\n  }\n  // TODO: memoize event-placement?\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      options\n    } = context;\n    let isSelectMirror = options.selectMirror;\n    let mirrorSegs =\n    // yuck\n    props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n    let interactionAffectedInstances =\n    // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder);\n    return createElement(DayCellContainer, {\n      elTag: \"td\",\n      elRef: props.elRef,\n      elClasses: ['fc-timegrid-col', ...(props.extraClassNames || [])],\n      elAttrs: Object.assign({\n        role: 'gridcell'\n      }, props.extraDataAttrs),\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraRenderProps: props.extraRenderProps\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-bg\"\n    }, this.renderFillSegs(props.businessHourSegs, 'non-business'), this.renderFillSegs(props.bgEventSegs, 'bg-event'), this.renderFillSegs(props.dateSelectionSegs, 'highlight')), createElement(\"div\", {\n      className: \"fc-timegrid-col-events\"\n    }, this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), createElement(\"div\", {\n      className: \"fc-timegrid-col-events\"\n    }, this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))), createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, this.renderNowIndicator(props.nowIndicatorSegs)), hasCustomDayCellContent(options) && createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-timegrid-col-misc']\n    })));\n  }\n  renderFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    let {\n      props\n    } = this;\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props);\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n  }\n  renderPositionedFgSegs(segs,\n  // if not mirror, needs to be sorted\n  segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    let {\n      eventMaxStack,\n      eventShortHeight,\n      eventOrderStrict,\n      eventMinHeight\n    } = this.context.options;\n    let {\n      date,\n      slatCoords,\n      eventSelection,\n      todayRange,\n      nowDate\n    } = this.props;\n    let isMirror = isDragging || isResizing || isDateSelecting;\n    let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n    let {\n      segPlacements,\n      hiddenGroups\n    } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack);\n    return createElement(Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(segPlacement => {\n      let {\n        seg,\n        rect\n      } = segPlacement;\n      let instanceId = seg.eventRange.instance.instanceId;\n      let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n      let vStyle = computeSegVStyle(rect && rect.span);\n      let hStyle = !isMirror && rect ? this.computeSegHStyle(rect) : {\n        left: 0,\n        right: 0\n      };\n      let isInset = Boolean(rect) && rect.stackForward > 0;\n      let isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n      return createElement(\"div\", {\n        className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),\n        key: instanceId,\n        style: Object.assign(Object.assign({\n          visibility: isVisible ? '' : 'hidden'\n        }, vStyle), hStyle)\n      }, createElement(TimeColEvent, Object.assign({\n        seg: seg,\n        isDragging: isDragging,\n        isResizing: isResizing,\n        isDateSelecting: isDateSelecting,\n        isSelected: instanceId === eventSelection,\n        isShort: isShort\n      }, getSegMeta(seg, todayRange, nowDate))));\n    }));\n  }\n  // will already have eventMinHeight applied because segInputs already had it\n  renderHiddenGroups(hiddenGroups, segs) {\n    let {\n      extraDateSpan,\n      dateProfile,\n      todayRange,\n      nowDate,\n      eventSelection,\n      eventDrag,\n      eventResize\n    } = this.props;\n    return createElement(Fragment, null, hiddenGroups.map(hiddenGroup => {\n      let positionCss = computeSegVStyle(hiddenGroup.span);\n      let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n      return createElement(TimeColMoreLink, {\n        key: buildIsoString(computeEarliestSegStart(hiddenSegs)),\n        hiddenSegs: hiddenSegs,\n        top: positionCss.top,\n        bottom: positionCss.bottom,\n        extraDateSpan: extraDateSpan,\n        dateProfile: dateProfile,\n        todayRange: todayRange,\n        nowDate: nowDate,\n        eventSelection: eventSelection,\n        eventDrag: eventDrag,\n        eventResize: eventResize\n      });\n    }));\n  }\n  renderFillSegs(segs, fillType) {\n    let {\n      props,\n      context\n    } = this;\n    let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n    let children = segVCoords.map((vcoords, i) => {\n      let seg = segs[i];\n      return createElement(\"div\", {\n        key: buildEventRangeKey(seg.eventRange),\n        className: \"fc-timegrid-bg-harness\",\n        style: computeSegVStyle(vcoords)\n      }, fillType === 'bg-event' ? createElement(BgEvent, Object.assign({\n        seg: seg\n      }, getSegMeta(seg, props.todayRange, props.nowDate))) : renderFill(fillType));\n    });\n    return createElement(Fragment, null, children);\n  }\n  renderNowIndicator(segs) {\n    let {\n      slatCoords,\n      date\n    } = this.props;\n    if (!slatCoords) {\n      return null;\n    }\n    return segs.map((seg, i) => createElement(NowIndicatorContainer\n    // key doesn't matter. will only ever be one\n    , {\n      // key doesn't matter. will only ever be one\n      key: i,\n      elClasses: ['fc-timegrid-now-indicator-line'],\n      elStyle: {\n        top: slatCoords.computeDateTop(seg.start, date)\n      },\n      isAxis: false,\n      date: date\n    }));\n  }\n  computeSegHStyle(segHCoords) {\n    let {\n      isRtl,\n      options\n    } = this.context;\n    let shouldOverlap = options.slotEventOverlap;\n    let nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n    let farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n    let left; // amount of space from left edge, a fraction of the total width\n    let right; // amount of space from right edge, a fraction of the total width\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n    }\n    if (isRtl) {\n      left = 1 - farCoord;\n      right = nearCoord;\n    } else {\n      left = nearCoord;\n      right = 1 - farCoord;\n    }\n    let props = {\n      zIndex: segHCoords.stackDepth + 1,\n      left: left * 100 + '%',\n      right: right * 100 + '%'\n    };\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n\n    return props;\n  }\n}\nfunction renderPlainFgSegs(sortedFgSegs, _ref) {\n  let {\n    todayRange,\n    nowDate,\n    eventSelection,\n    eventDrag,\n    eventResize\n  } = _ref;\n  let hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n  return createElement(Fragment, null, sortedFgSegs.map(seg => {\n    let instanceId = seg.eventRange.instance.instanceId;\n    return createElement(\"div\", {\n      key: instanceId,\n      style: {\n        visibility: hiddenInstances[instanceId] ? 'hidden' : ''\n      }\n    }, createElement(TimeColEvent, Object.assign({\n      seg: seg,\n      isDragging: false,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: instanceId === eventSelection,\n      isShort: false\n    }, getSegMeta(seg, todayRange, nowDate))));\n  }));\n}\nfunction computeSegVStyle(segVCoords) {\n  if (!segVCoords) {\n    return {\n      top: '',\n      bottom: ''\n    };\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end\n  };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n  return segEntries.map(segEntry => allSegs[segEntry.index]);\n}\nclass TimeColsContent extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.splitFgEventSegs = memoize(splitSegsByCol);\n    this.splitBgEventSegs = memoize(splitSegsByCol);\n    this.splitBusinessHourSegs = memoize(splitSegsByCol);\n    this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n    this.splitDateSelectionSegs = memoize(splitSegsByCol);\n    this.splitEventDrag = memoize(splitInteractionByCol);\n    this.splitEventResize = memoize(splitInteractionByCol);\n    this.rootElRef = createRef();\n    this.cellElRefs = new RefMap();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n    let colCnt = props.cells.length;\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n    return createElement(\"div\", {\n      className: \"fc-timegrid-cols\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      role: \"presentation\",\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth\n      }\n    }, props.tableColGroupNode, createElement(\"tbody\", {\n      role: \"presentation\"\n    }, createElement(\"tr\", {\n      role: \"row\"\n    }, props.axis && createElement(\"td\", {\n      \"aria-hidden\": true,\n      className: \"fc-timegrid-col fc-timegrid-axis\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, typeof nowIndicatorTop === 'number' && createElement(NowIndicatorContainer, {\n      elClasses: ['fc-timegrid-now-indicator-arrow'],\n      elStyle: {\n        top: nowIndicatorTop\n      },\n      isAxis: true,\n      date: props.nowDate\n    })))), props.cells.map((cell, i) => createElement(TimeCol, {\n      key: cell.key,\n      elRef: this.cellElRefs.createRef(cell.key),\n      dateProfile: props.dateProfile,\n      date: cell.date,\n      nowDate: props.nowDate,\n      todayRange: props.todayRange,\n      extraRenderProps: cell.extraRenderProps,\n      extraDataAttrs: cell.extraDataAttrs,\n      extraClassNames: cell.extraClassNames,\n      extraDateSpan: cell.extraDateSpan,\n      fgEventSegs: fgEventSegsByRow[i],\n      bgEventSegs: bgEventSegsByRow[i],\n      businessHourSegs: businessHourSegsByRow[i],\n      nowIndicatorSegs: nowIndicatorSegsByRow[i],\n      dateSelectionSegs: dateSelectionSegsByRow[i],\n      eventDrag: eventDragByRow[i],\n      eventResize: eventResizeByRow[i],\n      slatCoords: props.slatCoords,\n      eventSelection: props.eventSelection,\n      forPrint: props.forPrint\n    }))))));\n  }\n  componentDidMount() {\n    this.updateCoords();\n  }\n  componentDidUpdate() {\n    this.updateCoords();\n  }\n  updateCoords() {\n    let {\n      props\n    } = this;\n    if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true,\n      // horizontal\n      false));\n    }\n  }\n}\nfunction collectCellEls(elMap, cells) {\n  return cells.map(cell => elMap[cell.key]);\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\nclass TimeCols extends DateComponent {\n  constructor() {\n    super(...arguments);\n    this.processSlotOptions = memoize(processSlotOptions);\n    this.state = {\n      slatCoords: null\n    };\n    this.handleRootEl = el => {\n      if (el) {\n        this.context.registerInteractiveComponent(this, {\n          el,\n          isHitComboAllowed: this.props.isHitComboAllowed\n        });\n      } else {\n        this.context.unregisterInteractiveComponent(this);\n      }\n    };\n    this.handleScrollRequest = request => {\n      let {\n        onScrollTopRequest\n      } = this.props;\n      let {\n        slatCoords\n      } = this.state;\n      if (onScrollTopRequest && slatCoords) {\n        if (request.time) {\n          let top = slatCoords.computeTimeTop(request.time);\n          top = Math.ceil(top); // zoom can give weird floating-point values. rather scroll a little bit further\n          if (top) {\n            top += 1; // to overcome top border that slots beyond the first have. looks better\n          }\n\n          onScrollTopRequest(top);\n        }\n        return true;\n      }\n      return false;\n    };\n    this.handleColCoords = colCoords => {\n      this.colCoords = colCoords;\n    };\n    this.handleSlatCoords = slatCoords => {\n      this.setState({\n        slatCoords\n      });\n      if (this.props.onSlatCoords) {\n        this.props.onSlatCoords(slatCoords);\n      }\n    };\n  }\n  render() {\n    let {\n      props,\n      state\n    } = this;\n    return createElement(\"div\", {\n      className: \"fc-timegrid-body\",\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(TimeColsSlats, {\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      slatMetas: props.slatMetas,\n      clientWidth: props.clientWidth,\n      minHeight: props.expandRows ? props.clientHeight : '',\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */,\n      onCoords: this.handleSlatCoords\n    }), createElement(TimeColsContent, {\n      cells: props.cells,\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      businessHourSegs: props.businessHourSegs,\n      bgEventSegs: props.bgEventSegs,\n      fgEventSegs: props.fgEventSegs,\n      dateSelectionSegs: props.dateSelectionSegs,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      todayRange: props.todayRange,\n      nowDate: props.nowDate,\n      nowIndicatorSegs: props.nowIndicatorSegs,\n      clientWidth: props.clientWidth,\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.tableColGroupNode,\n      slatCoords: state.slatCoords,\n      onColCoords: this.handleColCoords,\n      forPrint: props.forPrint\n    }));\n  }\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  }\n  componentDidUpdate(prevProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n  }\n  componentWillUnmount() {\n    this.scrollResponder.detach();\n  }\n  queryHit(positionLeft, positionTop) {\n    let {\n      dateEnv,\n      options\n    } = this.context;\n    let {\n      colCoords\n    } = this;\n    let {\n      dateProfile\n    } = this.props;\n    let {\n      slatCoords\n    } = this.state;\n    let {\n      snapDuration,\n      snapsPerSlot\n    } = this.processSlotOptions(this.props.slotDuration, options.snapDuration);\n    let colIndex = colCoords.leftToIndex(positionLeft);\n    let slatIndex = slatCoords.positions.topToIndex(positionTop);\n    if (colIndex != null && slatIndex != null) {\n      let cell = this.props.cells[colIndex];\n      let slatTop = slatCoords.positions.tops[slatIndex];\n      let slatHeight = slatCoords.positions.getHeight(slatIndex);\n      let partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      let dayDate = this.props.cells[colIndex].date;\n      let time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n      let start = dateEnv.add(dayDate, time);\n      let end = dateEnv.add(start, snapDuration);\n      return {\n        dateProfile,\n        dateSpan: Object.assign({\n          range: {\n            start,\n            end\n          },\n          allDay: false\n        }, cell.extraDateSpan),\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        },\n        layer: 0\n      };\n    }\n    return null;\n  }\n}\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n  let snapDuration = snapDurationOverride || slotDuration;\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration;\n    snapsPerSlot = 1;\n    // TODO: say warning?\n  }\n\n  return {\n    snapDuration,\n    snapsPerSlot\n  };\n}\nclass DayTimeColsSlicer extends Slicer {\n  sliceRange(range, dayRanges) {\n    let segs = [];\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col]);\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col\n        });\n      }\n    }\n    return segs;\n  }\n}\nclass DayTimeCols extends DateComponent {\n  constructor() {\n    super(...arguments);\n    this.buildDayRanges = memoize(buildDayRanges);\n    this.slicer = new DayTimeColsSlicer();\n    this.timeColsRef = createRef();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      dateProfile,\n      dayTableModel\n    } = props;\n    let isNowIndicator = context.options.nowIndicator;\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return createElement(NowTimer, {\n      unit: isNowIndicator ? 'minute' : 'day'\n    }, (nowDate, todayRange) => createElement(TimeCols, Object.assign({\n      ref: this.timeColsRef\n    }, this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n      forPrint: props.forPrint,\n      axis: props.axis,\n      dateProfile: dateProfile,\n      slatMetas: props.slatMetas,\n      slotDuration: props.slotDuration,\n      cells: dayTableModel.cells[0],\n      tableColGroupNode: props.tableColGroupNode,\n      tableMinWidth: props.tableMinWidth,\n      clientWidth: props.clientWidth,\n      clientHeight: props.clientHeight,\n      expandRows: props.expandRows,\n      nowDate: nowDate,\n      nowIndicatorSegs: isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges),\n      todayRange: todayRange,\n      onScrollTopRequest: props.onScrollTopRequest,\n      onSlatCoords: props.onSlatCoords\n    })));\n  }\n}\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n  let ranges = [];\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime)\n    });\n  }\n  return ranges;\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n  let dayStart = new Date(0);\n  let slatTime = slotMinTime;\n  let slatIterator = createDuration(0);\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n  let metas = [];\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime);\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(),\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled\n    });\n    slatTime = addDurations(slatTime, slotDuration);\n    slatIterator = addDurations(slatIterator, slotDuration);\n  }\n  return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i;\n  let labelInterval;\n  let slotsPerLabel;\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval;\n    }\n  }\n  return slotDuration; // fall back\n}\n\nclass DayTimeColsView extends TimeColsView {\n  constructor() {\n    super(...arguments);\n    this.buildTimeColsModel = memoize(buildTimeColsModel);\n    this.buildSlatMetas = memoize(buildSlatMetas);\n  }\n  render() {\n    let {\n      options,\n      dateEnv,\n      dateProfileGenerator\n    } = this.context;\n    let {\n      props\n    } = this;\n    let {\n      dateProfile\n    } = props;\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n    let splitProps = this.allDaySplitter.splitProps(props);\n    let slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n    let {\n      dayMinWidth\n    } = options;\n    let hasAttachedAxis = !dayMinWidth;\n    let hasDetachedAxis = dayMinWidth;\n    let headerContent = options.dayHeaders && createElement(DayHeader, {\n      dates: dayTableModel.headerDates,\n      dateProfile: dateProfile,\n      datesRepDistinctDays: true,\n      renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n    });\n    let allDayContent = options.allDaySlot !== false && (contentArg => createElement(DayTable, Object.assign({}, splitProps.allDay, {\n      dateProfile: dateProfile,\n      dayTableModel: dayTableModel,\n      nextDayThreshold: options.nextDayThreshold,\n      tableMinWidth: contentArg.tableMinWidth,\n      colGroupNode: contentArg.tableColGroupNode,\n      renderRowIntro: hasAttachedAxis ? this.renderTableRowAxis : null,\n      showWeekNumbers: false,\n      expandRows: false,\n      headerAlignElRef: this.headerElRef,\n      clientWidth: contentArg.clientWidth,\n      clientHeight: contentArg.clientHeight,\n      forPrint: props.forPrint\n    }, this.getAllDayMaxEventProps())));\n    let timeGridContent = contentArg => createElement(DayTimeCols, Object.assign({}, splitProps.timed, {\n      dayTableModel: dayTableModel,\n      dateProfile: dateProfile,\n      axis: hasAttachedAxis,\n      slotDuration: options.slotDuration,\n      slatMetas: slatMetas,\n      forPrint: props.forPrint,\n      tableColGroupNode: contentArg.tableColGroupNode,\n      tableMinWidth: contentArg.tableMinWidth,\n      clientWidth: contentArg.clientWidth,\n      clientHeight: contentArg.clientHeight,\n      onSlatCoords: this.handleSlatCoords,\n      expandRows: contentArg.expandRows,\n      onScrollTopRequest: this.handleScrollTopRequest\n    }));\n    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n  }\n}\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, false);\n}\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };","map":{"version":3,"names":["Splitter","hasBgRendering","createFormatter","ViewContextType","ContentContainer","BaseComponent","DateComponent","diffDays","buildNavLinkAttrs","WeekNumberContainer","getStickyHeaderDates","ViewContainer","SimpleScrollGrid","getStickyFooterScrollbar","NowTimer","NowIndicatorContainer","renderScrollShim","rangeContainsMarker","startOfDay","asRoughMs","createDuration","RefMap","PositionCache","MoreLinkContainer","SegHierarchy","groupIntersectingEntries","binarySearch","getEntrySpanEnd","buildEntryKey","StandardEvent","memoize","sortEventSegs","DayCellContainer","hasCustomDayCellContent","getSegMeta","buildIsoString","computeEarliestSegStart","buildEventRangeKey","BgEvent","renderFill","addDurations","multiplyDuration","wholeDivideDurations","Slicer","intersectRanges","formatIsoTimeString","DayHeader","DaySeriesModel","DayTableModel","createElement","createRef","Fragment","DayTable","AllDaySplitter","getKeyInfo","allDay","timed","getKeysForDateSpan","dateSpan","getKeysForEventDef","eventDef","DEFAULT_SLAT_LABEL_FORMAT","hour","minute","omitZeroMinute","meridiem","TimeColsAxisCell","props","classNames","isLabeled","Consumer","context","className","join","isoTimeStr","dateEnv","options","viewApi","labelFormat","slotLabelFormat","Array","isArray","renderProps","level","time","date","toDate","view","text","format","elTag","elClasses","elAttrs","generatorName","generator","slotLabelContent","renderInnerContent","classNameGenerator","slotLabelClassNames","didMount","slotLabelDidMount","willUnmount","slotLabelWillUnmount","InnerContent","TimeBodyAxis","render","slatMetas","map","slatMeta","key","Object","assign","DEFAULT_WEEK_NUM_FORMAT","week","AUTO_ALL_DAY_MAX_EVENT_ROWS","TimeColsView","constructor","arguments","allDaySplitter","headerElRef","rootElRef","scrollerElRef","state","slatCoords","handleScrollTopRequest","scrollTop","scrollerEl","current","renderHeadAxis","rowKey","frameHeight","dateProfile","range","renderRange","dayCnt","start","end","navLinkAttrs","weekNumbers","defaultFormat","style","height","renderTableRowAxis","rowHeight","allDayText","allDayContent","renderAllDayInner","allDayClassNames","allDayDidMount","allDayWillUnmount","handleSlatCoords","setState","renderSimpleLayout","headerRowContent","timeContent","sections","stickyHeaderDates","push","type","isSticky","chunk","elRef","tableClassName","rowContent","content","outerContent","role","theme","getClass","liquid","expandRows","Boolean","viewSpec","isHeightAuto","forPrint","collapsibleWidth","cols","width","renderHScrollLayout","colCnt","dayMinWidth","ScrollGrid","pluginHooks","scrollGridImpl","Error","stickyFooterScrollbar","syncRowHeights","chunks","arg","rowSyncHeights","contentArg","colSpan","isNowIndicator","nowIndicator","clientHeight","tableColGroupNode","unit","nowDate","nowIndicatorTop","safeComputeTop","elStyle","top","isAxis","colGroups","span","minWidth","getAllDayMaxEventProps","dayMaxEvents","dayMaxEventRows","undefined","TimeColsSlatsCoords","positions","slotDuration","currentRange","startOfDayDate","timeMs","valueOf","slotMinTime","slotMaxTime","computeTimeTop","computeDateTop","when","duration","len","els","length","slatCoverage","milliseconds","slatIndex","slatRemainder","Math","max","min","floor","tops","getHeight","TimeColsSlatsBody","slatElRefs","i","ref","axis","slotLaneContent","slotLaneClassNames","slotLaneDidMount","slotLaneWillUnmount","TimeColsSlats","tableMinWidth","clientWidth","minHeight","componentDidMount","updateSizing","componentDidUpdate","componentWillUnmount","onCoords","rootEl","offsetHeight","collectSlatEls","currentMap","elMap","splitSegsByCol","segs","segsByCol","col","splitInteractionByCol","ui","byRow","affectedInstances","isEvent","seg","TimeColMoreLink","bottom","allDayDate","moreCnt","hiddenSegs","allSegs","extraDateSpan","todayRange","popoverContent","renderPlainFgSegs","defaultGenerator","renderMoreLinkInner","shortText","buildPositioning","segInputs","strictOrder","maxStackCnt","hierarchy","hiddenEntries","addSegs","hiddenGroups","web","buildWeb","stretchWeb","segRects","webToRects","entriesByLevel","buildNode","cacheable","lateral","siblingRange","findNextLevelSegs","nextLevelRes","buildNodes","entry","nextLevelNodes","thickness","lateralStart","lateralEnd","pairs","sort","cmpDescPressures","extractNode","a","b","subjectLevel","subjectLateral","levelCoords","subjectEntry","afterSubject","levelCnt","entries","searchIndex","topLevelNodes","totalThickness","stretchNode","node","startCoord","prevThickness","allThickness","thicknessFraction","endCoord","newChildren","childNode","res","newThickness","rects","processNode","levelCoord","stackDepth","rect","stackForward","processNodes","nodes","keyFunc","workFunc","cache","computeSegVCoords","colDate","eventMinHeight","vcoords","spanStart","spanEnd","round","computeFgSegPlacements","segVCoords","eventOrderStrict","eventMaxStack","dumbSegs","index","segPlacements","segRect","dumbSeg","DEFAULT_TIME_FORMAT","TimeColEvent","isShort","defaultTimeFormat","TimeCol","isSelectMirror","selectMirror","mirrorSegs","eventDrag","eventResize","dateSelectionSegs","interactionAffectedInstances","sortedFgSegs","fgEventSegs","eventOrder","extraClassNames","extraDataAttrs","extraRenderProps","renderFillSegs","businessHourSegs","bgEventSegs","renderFgSegs","renderNowIndicator","nowIndicatorSegs","segIsInvisible","isDragging","isResizing","isDateSelecting","renderPositionedFgSegs","eventShortHeight","eventSelection","isMirror","renderHiddenGroups","segPlacement","instanceId","eventRange","instance","isVisible","vStyle","computeSegVStyle","hStyle","computeSegHStyle","left","right","isInset","visibility","isSelected","hiddenGroup","positionCss","compileSegsFromEntries","fillType","children","segHCoords","isRtl","shouldOverlap","slotEventOverlap","nearCoord","farCoord","zIndex","hiddenInstances","segEntries","segEntry","TimeColsContent","splitFgEventSegs","splitBgEventSegs","splitBusinessHourSegs","splitNowIndicatorSegs","splitDateSelectionSegs","splitEventDrag","splitEventResize","cellElRefs","cells","fgEventSegsByRow","bgEventSegsByRow","businessHourSegsByRow","nowIndicatorSegsByRow","dateSelectionSegsByRow","eventDragByRow","eventResizeByRow","cell","updateCoords","onColCoords","collectCellEls","TimeCols","processSlotOptions","handleRootEl","el","registerInteractiveComponent","isHitComboAllowed","unregisterInteractiveComponent","handleScrollRequest","request","onScrollTopRequest","ceil","handleColCoords","colCoords","onSlatCoords","scrollResponder","createScrollResponder","prevProps","update","detach","queryHit","positionLeft","positionTop","snapDuration","snapsPerSlot","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","localSnapIndex","snapIndex","dayDate","add","dayEl","lefts","rights","layer","snapDurationOverride","DayTimeColsSlicer","sliceRange","dayRanges","segRange","isStart","isEnd","DayTimeCols","buildDayRanges","slicer","timeColsRef","dayTableModel","sliceProps","sliceNowDate","ranges","headerDates","STOCK_SUB_DURATIONS","hours","minutes","seconds","buildSlatMetas","explicitLabelInterval","dayStart","Date","slatTime","slatIterator","labelInterval","computeLabelInterval","metas","toISOString","slotsPerLabel","DayTimeColsView","buildTimeColsModel","dateProfileGenerator","splitProps","slotLabelInterval","hasAttachedAxis","hasDetachedAxis","headerContent","dayHeaders","dates","datesRepDistinctDays","renderIntro","allDaySlot","nextDayThreshold","colGroupNode","renderRowIntro","showWeekNumbers","headerAlignElRef","timeGridContent","daySeries"],"sources":["D:/Desktop/Testing/frontend/node_modules/@fullcalendar/timegrid/internal.js"],"sourcesContent":["import { Splitter, hasBgRendering, createFormatter, ViewContextType, ContentContainer, BaseComponent, DateComponent, diffDays, buildNavLinkAttrs, WeekNumberContainer, getStickyHeaderDates, ViewContainer, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorContainer, renderScrollShim, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, MoreLinkContainer, SegHierarchy, groupIntersectingEntries, binarySearch, getEntrySpanEnd, buildEntryKey, StandardEvent, memoize, sortEventSegs, DayCellContainer, hasCustomDayCellContent, getSegMeta, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, renderFill, addDurations, multiplyDuration, wholeDivideDurations, Slicer, intersectRanges, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel } from '@fullcalendar/core/internal.js';\nimport { createElement, createRef, Fragment } from '@fullcalendar/core/preact.js';\nimport { DayTable } from '@fullcalendar/daygrid/internal.js';\n\nclass AllDaySplitter extends Splitter {\n    getKeyInfo() {\n        return {\n            allDay: {},\n            timed: {},\n        };\n    }\n    getKeysForDateSpan(dateSpan) {\n        if (dateSpan.allDay) {\n            return ['allDay'];\n        }\n        return ['timed'];\n    }\n    getKeysForEventDef(eventDef) {\n        if (!eventDef.allDay) {\n            return ['timed'];\n        }\n        if (hasBgRendering(eventDef)) {\n            return ['timed', 'allDay'];\n        }\n        return ['allDay'];\n    }\n}\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n    hour: 'numeric',\n    minute: '2-digit',\n    omitZeroMinute: true,\n    meridiem: 'short',\n});\nfunction TimeColsAxisCell(props) {\n    let classNames = [\n        'fc-timegrid-slot',\n        'fc-timegrid-slot-label',\n        props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n    ];\n    return (createElement(ViewContextType.Consumer, null, (context) => {\n        if (!props.isLabeled) {\n            return (createElement(\"td\", { className: classNames.join(' '), \"data-time\": props.isoTimeStr }));\n        }\n        let { dateEnv, options, viewApi } = context;\n        let labelFormat = // TODO: fully pre-parse\n         options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n                createFormatter(options.slotLabelFormat);\n        let renderProps = {\n            level: 0,\n            time: props.time,\n            date: dateEnv.toDate(props.date),\n            view: viewApi,\n            text: dateEnv.format(props.date, labelFormat),\n        };\n        return (createElement(ContentContainer, { elTag: \"td\", elClasses: classNames, elAttrs: {\n                'data-time': props.isoTimeStr,\n            }, renderProps: renderProps, generatorName: \"slotLabelContent\", generator: options.slotLabelContent || renderInnerContent, classNameGenerator: options.slotLabelClassNames, didMount: options.slotLabelDidMount, willUnmount: options.slotLabelWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\" },\n            createElement(InnerContent, { elTag: \"div\", elClasses: [\n                    'fc-timegrid-slot-label-cushion',\n                    'fc-scrollgrid-shrink-cushion',\n                ] })))));\n    }));\n}\nfunction renderInnerContent(props) {\n    return props.text;\n}\n\nclass TimeBodyAxis extends BaseComponent {\n    render() {\n        return this.props.slatMetas.map((slatMeta) => (createElement(\"tr\", { key: slatMeta.key },\n            createElement(TimeColsAxisCell, Object.assign({}, slatMeta)))));\n    }\n}\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' });\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nclass TimeColsView extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n        this.headerElRef = createRef();\n        this.rootElRef = createRef();\n        this.scrollerElRef = createRef();\n        this.state = {\n            slatCoords: null,\n        };\n        this.handleScrollTopRequest = (scrollTop) => {\n            let scrollerEl = this.scrollerElRef.current;\n            if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n                scrollerEl.scrollTop = scrollTop;\n            }\n        };\n        /* Header Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        this.renderHeadAxis = (rowKey, frameHeight = '') => {\n            let { options } = this.context;\n            let { dateProfile } = this.props;\n            let range = dateProfile.renderRange;\n            let dayCnt = diffDays(range.start, range.end);\n            // only do in day views (to avoid doing in week views that dont need it)\n            let navLinkAttrs = (dayCnt === 1)\n                ? buildNavLinkAttrs(this.context, range.start, 'week')\n                : {};\n            if (options.weekNumbers && rowKey === 'day') {\n                return (createElement(WeekNumberContainer, { elTag: \"th\", elClasses: [\n                        'fc-timegrid-axis',\n                        'fc-scrollgrid-shrink',\n                    ], elAttrs: {\n                        'aria-hidden': true,\n                    }, date: range.start, defaultFormat: DEFAULT_WEEK_NUM_FORMAT }, (InnerContent) => (createElement(\"div\", { className: [\n                        'fc-timegrid-axis-frame',\n                        'fc-scrollgrid-shrink-frame',\n                        'fc-timegrid-axis-frame-liquid',\n                    ].join(' '), style: { height: frameHeight } },\n                    createElement(InnerContent, { elTag: \"a\", elClasses: [\n                            'fc-timegrid-axis-cushion',\n                            'fc-scrollgrid-shrink-cushion',\n                            'fc-scrollgrid-sync-inner',\n                        ], elAttrs: navLinkAttrs })))));\n            }\n            return (createElement(\"th\", { \"aria-hidden\": true, className: \"fc-timegrid-axis\" },\n                createElement(\"div\", { className: \"fc-timegrid-axis-frame\", style: { height: frameHeight } })));\n        };\n        /* Table Component Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n        // but DayGrid still needs to have classNames on inner elements in order to measure.\n        this.renderTableRowAxis = (rowHeight) => {\n            let { options, viewApi } = this.context;\n            let renderProps = {\n                text: options.allDayText,\n                view: viewApi,\n            };\n            return (\n            // TODO: make reusable hook. used in list view too\n            createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                    'fc-timegrid-axis',\n                    'fc-scrollgrid-shrink',\n                ], elAttrs: {\n                    'aria-hidden': true,\n                }, renderProps: renderProps, generatorName: \"allDayContent\", generator: options.allDayContent || renderAllDayInner, classNameGenerator: options.allDayClassNames, didMount: options.allDayDidMount, willUnmount: options.allDayWillUnmount }, (InnerContent) => (createElement(\"div\", { className: [\n                    'fc-timegrid-axis-frame',\n                    'fc-scrollgrid-shrink-frame',\n                    rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '',\n                ].join(' '), style: { height: rowHeight } },\n                createElement(InnerContent, { elTag: \"span\", elClasses: [\n                        'fc-timegrid-axis-cushion',\n                        'fc-scrollgrid-shrink-cushion',\n                        'fc-scrollgrid-sync-inner',\n                    ] })))));\n        };\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n        };\n    }\n    // rendering\n    // ----------------------------------------------------------------------------------------------------\n    renderSimpleLayout(headerRowContent, allDayContent, timeContent) {\n        let { context, props } = this;\n        let sections = [];\n        let stickyHeaderDates = getStickyHeaderDates(context.options);\n        if (headerRowContent) {\n            sections.push({\n                type: 'header',\n                key: 'header',\n                isSticky: stickyHeaderDates,\n                chunk: {\n                    elRef: this.headerElRef,\n                    tableClassName: 'fc-col-header',\n                    rowContent: headerRowContent,\n                },\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: 'body',\n                key: 'all-day',\n                chunk: { content: allDayContent },\n            });\n            sections.push({\n                type: 'body',\n                key: 'all-day-divider',\n                outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n                createElement(\"tr\", { role: \"presentation\", className: \"fc-scrollgrid-section\" },\n                    createElement(\"td\", { className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded') }))),\n            });\n        }\n        sections.push({\n            type: 'body',\n            key: 'body',\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunk: {\n                scrollerElRef: this.scrollerElRef,\n                content: timeContent,\n            },\n        });\n        return (createElement(ViewContainer, { elRef: this.rootElRef, elClasses: ['fc-timegrid'], viewSpec: context.viewSpec },\n            createElement(SimpleScrollGrid, { liquid: !props.isHeightAuto && !props.forPrint, collapsibleWidth: props.forPrint, cols: [{ width: 'shrink' }], sections: sections })));\n    }\n    renderHScrollLayout(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n        let ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n        if (!ScrollGrid) {\n            throw new Error('No ScrollGrid implementation');\n        }\n        let { context, props } = this;\n        let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n        let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n        let sections = [];\n        if (headerRowContent) {\n            sections.push({\n                type: 'header',\n                key: 'header',\n                isSticky: stickyHeaderDates,\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: 'axis',\n                        rowContent: (arg) => (createElement(\"tr\", { role: \"presentation\" }, this.renderHeadAxis('day', arg.rowSyncHeights[0]))),\n                    },\n                    {\n                        key: 'cols',\n                        elRef: this.headerElRef,\n                        tableClassName: 'fc-col-header',\n                        rowContent: headerRowContent,\n                    },\n                ],\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: 'body',\n                key: 'all-day',\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: 'axis',\n                        rowContent: (contentArg) => (createElement(\"tr\", { role: \"presentation\" }, this.renderTableRowAxis(contentArg.rowSyncHeights[0]))),\n                    },\n                    {\n                        key: 'cols',\n                        content: allDayContent,\n                    },\n                ],\n            });\n            sections.push({\n                key: 'all-day-divider',\n                type: 'body',\n                outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n                createElement(\"tr\", { role: \"presentation\", className: \"fc-scrollgrid-section\" },\n                    createElement(\"td\", { colSpan: 2, className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded') }))),\n            });\n        }\n        let isNowIndicator = context.options.nowIndicator;\n        sections.push({\n            type: 'body',\n            key: 'body',\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunks: [\n                {\n                    key: 'axis',\n                    content: (arg) => (\n                    // TODO: make this now-indicator arrow more DRY with TimeColsContent\n                    createElement(\"div\", { className: \"fc-timegrid-axis-chunk\" },\n                        createElement(\"table\", { \"aria-hidden\": true, style: { height: arg.expandRows ? arg.clientHeight : '' } },\n                            arg.tableColGroupNode,\n                            createElement(\"tbody\", null,\n                                createElement(TimeBodyAxis, { slatMetas: slatMetas }))),\n                        createElement(\"div\", { className: \"fc-timegrid-now-indicator-container\" },\n                            createElement(NowTimer, { unit: isNowIndicator ? 'minute' : 'day' /* hacky */ }, (nowDate) => {\n                                let nowIndicatorTop = isNowIndicator &&\n                                    slatCoords &&\n                                    slatCoords.safeComputeTop(nowDate); // might return void\n                                if (typeof nowIndicatorTop === 'number') {\n                                    return (createElement(NowIndicatorContainer, { elClasses: ['fc-timegrid-now-indicator-arrow'], elStyle: { top: nowIndicatorTop }, isAxis: true, date: nowDate }));\n                                }\n                                return null;\n                            })))),\n                },\n                {\n                    key: 'cols',\n                    scrollerElRef: this.scrollerElRef,\n                    content: timeContent,\n                },\n            ],\n        });\n        if (stickyFooterScrollbar) {\n            sections.push({\n                key: 'footer',\n                type: 'footer',\n                isSticky: true,\n                chunks: [\n                    {\n                        key: 'axis',\n                        content: renderScrollShim,\n                    },\n                    {\n                        key: 'cols',\n                        content: renderScrollShim,\n                    },\n                ],\n            });\n        }\n        return (createElement(ViewContainer, { elRef: this.rootElRef, elClasses: ['fc-timegrid'], viewSpec: context.viewSpec },\n            createElement(ScrollGrid, { liquid: !props.isHeightAuto && !props.forPrint, collapsibleWidth: false, colGroups: [\n                    { width: 'shrink', cols: [{ width: 'shrink' }] },\n                    { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n                ], sections: sections })));\n    }\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n    getAllDayMaxEventProps() {\n        let { dayMaxEvents, dayMaxEventRows } = this.context.options;\n        if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n            dayMaxEvents = undefined;\n            dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n        }\n        return { dayMaxEvents, dayMaxEventRows };\n    }\n}\nfunction renderAllDayInner(renderProps) {\n    return renderProps.text;\n}\n\nclass TimeColsSlatsCoords {\n    constructor(positions, dateProfile, slotDuration) {\n        this.positions = positions;\n        this.dateProfile = dateProfile;\n        this.slotDuration = slotDuration;\n    }\n    safeComputeTop(date) {\n        let { dateProfile } = this;\n        if (rangeContainsMarker(dateProfile.currentRange, date)) {\n            let startOfDayDate = startOfDay(date);\n            let timeMs = date.valueOf() - startOfDayDate.valueOf();\n            if (timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n                timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n                return this.computeTimeTop(createDuration(timeMs));\n            }\n        }\n        return null;\n    }\n    // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n    computeDateTop(when, startOfDayDate) {\n        if (!startOfDayDate) {\n            startOfDayDate = startOfDay(when);\n        }\n        return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n    }\n    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n    // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n    // Eventually allow computation with arbirary slat dates.\n    computeTimeTop(duration) {\n        let { positions, dateProfile } = this;\n        let len = positions.els.length;\n        // floating-point value of # of slots covered\n        let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration);\n        let slatIndex;\n        let slatRemainder;\n        // compute a floating-point number for how many slats should be progressed through.\n        // from 0 to number of slats (inclusive)\n        // constrained because slotMinTime/slotMaxTime might be customized.\n        slatCoverage = Math.max(0, slatCoverage);\n        slatCoverage = Math.min(len, slatCoverage);\n        // an integer index of the furthest whole slat\n        // from 0 to number slats (*exclusive*, so len-1)\n        slatIndex = Math.floor(slatCoverage);\n        slatIndex = Math.min(slatIndex, len - 1);\n        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n        // could be 1.0 if slatCoverage is covering *all* the slots\n        slatRemainder = slatCoverage - slatIndex;\n        return positions.tops[slatIndex] +\n            positions.getHeight(slatIndex) * slatRemainder;\n    }\n}\n\nclass TimeColsSlatsBody extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let { slatElRefs } = props;\n        return (createElement(\"tbody\", null, props.slatMetas.map((slatMeta, i) => {\n            let renderProps = {\n                time: slatMeta.time,\n                date: context.dateEnv.toDate(slatMeta.date),\n                view: context.viewApi,\n            };\n            return (createElement(\"tr\", { key: slatMeta.key, ref: slatElRefs.createRef(slatMeta.key) },\n                props.axis && (createElement(TimeColsAxisCell, Object.assign({}, slatMeta))),\n                createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                        'fc-timegrid-slot',\n                        'fc-timegrid-slot-lane',\n                        !slatMeta.isLabeled && 'fc-timegrid-slot-minor',\n                    ], elAttrs: {\n                        'data-time': slatMeta.isoTimeStr,\n                    }, renderProps: renderProps, generatorName: \"slotLaneContent\", generator: options.slotLaneContent, classNameGenerator: options.slotLaneClassNames, didMount: options.slotLaneDidMount, willUnmount: options.slotLaneWillUnmount })));\n        })));\n    }\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\nclass TimeColsSlats extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.rootElRef = createRef();\n        this.slatElRefs = new RefMap();\n    }\n    render() {\n        let { props, context } = this;\n        return (createElement(\"div\", { ref: this.rootElRef, className: \"fc-timegrid-slots\" },\n            createElement(\"table\", { \"aria-hidden\": true, className: context.theme.getClass('table'), style: {\n                    minWidth: props.tableMinWidth,\n                    width: props.clientWidth,\n                    height: props.minHeight,\n                } },\n                props.tableColGroupNode /* relies on there only being a single <col> for the axis */,\n                createElement(TimeColsSlatsBody, { slatElRefs: this.slatElRefs, axis: props.axis, slatMetas: props.slatMetas }))));\n    }\n    componentDidMount() {\n        this.updateSizing();\n    }\n    componentDidUpdate() {\n        this.updateSizing();\n    }\n    componentWillUnmount() {\n        if (this.props.onCoords) {\n            this.props.onCoords(null);\n        }\n    }\n    updateSizing() {\n        let { context, props } = this;\n        if (props.onCoords &&\n            props.clientWidth !== null // means sizing has stabilized\n        ) {\n            let rootEl = this.rootElRef.current;\n            if (rootEl.offsetHeight) { // not hidden by css\n                props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n            }\n        }\n    }\n}\nfunction collectSlatEls(elMap, slatMetas) {\n    return slatMetas.map((slatMeta) => elMap[slatMeta.key]);\n}\n\nfunction splitSegsByCol(segs, colCnt) {\n    let segsByCol = [];\n    let i;\n    for (i = 0; i < colCnt; i += 1) {\n        segsByCol.push([]);\n    }\n    if (segs) {\n        for (i = 0; i < segs.length; i += 1) {\n            segsByCol[segs[i].col].push(segs[i]);\n        }\n    }\n    return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n    let byRow = [];\n    if (!ui) {\n        for (let i = 0; i < colCnt; i += 1) {\n            byRow[i] = null;\n        }\n    }\n    else {\n        for (let i = 0; i < colCnt; i += 1) {\n            byRow[i] = {\n                affectedInstances: ui.affectedInstances,\n                isEvent: ui.isEvent,\n                segs: [],\n            };\n        }\n        for (let seg of ui.segs) {\n            byRow[seg.col].segs.push(seg);\n        }\n    }\n    return byRow;\n}\n\nclass TimeColMoreLink extends BaseComponent {\n    render() {\n        let { props } = this;\n        return (createElement(MoreLinkContainer, { elClasses: ['fc-timegrid-more-link'], elStyle: {\n                top: props.top,\n                bottom: props.bottom,\n            }, allDayDate: null, moreCnt: props.hiddenSegs.length, allSegs: props.hiddenSegs, hiddenSegs: props.hiddenSegs, extraDateSpan: props.extraDateSpan, dateProfile: props.dateProfile, todayRange: props.todayRange, popoverContent: () => renderPlainFgSegs(props.hiddenSegs, props), defaultGenerator: renderMoreLinkInner }, (InnerContent) => (createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-timegrid-more-link-inner', 'fc-sticky'] }))));\n    }\n}\nfunction renderMoreLinkInner(props) {\n    return props.shortText;\n}\n\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n    let hierarchy = new SegHierarchy();\n    if (strictOrder != null) {\n        hierarchy.strictOrder = strictOrder;\n    }\n    if (maxStackCnt != null) {\n        hierarchy.maxStackCnt = maxStackCnt;\n    }\n    let hiddenEntries = hierarchy.addSegs(segInputs);\n    let hiddenGroups = groupIntersectingEntries(hiddenEntries);\n    let web = buildWeb(hierarchy);\n    web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n    let segRects = webToRects(web);\n    return { segRects, hiddenGroups };\n}\nfunction buildWeb(hierarchy) {\n    const { entriesByLevel } = hierarchy;\n    const buildNode = cacheable((level, lateral) => level + ':' + lateral, (level, lateral) => {\n        let siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n        let nextLevelRes = buildNodes(siblingRange, buildNode);\n        let entry = entriesByLevel[level][lateral];\n        return [\n            Object.assign(Object.assign({}, entry), { nextLevelNodes: nextLevelRes[0] }),\n            entry.thickness + nextLevelRes[1], // the pressure builds\n        ];\n    });\n    return buildNodes(entriesByLevel.length\n        ? { level: 0, lateralStart: 0, lateralEnd: entriesByLevel[0].length }\n        : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n    if (!siblingRange) {\n        return [[], 0];\n    }\n    let { level, lateralStart, lateralEnd } = siblingRange;\n    let lateral = lateralStart;\n    let pairs = [];\n    while (lateral < lateralEnd) {\n        pairs.push(buildNode(level, lateral));\n        lateral += 1;\n    }\n    pairs.sort(cmpDescPressures);\n    return [\n        pairs.map(extractNode),\n        pairs[0][1], // first item's pressure\n    ];\n}\nfunction cmpDescPressures(a, b) {\n    return b[1] - a[1];\n}\nfunction extractNode(a) {\n    return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n    let { levelCoords, entriesByLevel } = hierarchy;\n    let subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n    let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n    let levelCnt = levelCoords.length;\n    let level = subjectLevel;\n    // skip past levels that are too high up\n    for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1)\n        ; // do nothing\n    for (; level < levelCnt; level += 1) {\n        let entries = entriesByLevel[level];\n        let entry;\n        let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd);\n        let lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n        let lateralEnd = lateralStart;\n        while ( // loop through entries that horizontally intersect\n        (entry = entries[lateralEnd]) && // but not past the whole seg list\n            entry.span.start < subjectEntry.span.end) {\n            lateralEnd += 1;\n        }\n        if (lateralStart < lateralEnd) {\n            return { level, lateralStart, lateralEnd };\n        }\n    }\n    return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n    const stretchNode = cacheable((node, startCoord, prevThickness) => buildEntryKey(node), (node, startCoord, prevThickness) => {\n        let { nextLevelNodes, thickness } = node;\n        let allThickness = thickness + prevThickness;\n        let thicknessFraction = thickness / allThickness;\n        let endCoord;\n        let newChildren = [];\n        if (!nextLevelNodes.length) {\n            endCoord = totalThickness;\n        }\n        else {\n            for (let childNode of nextLevelNodes) {\n                if (endCoord === undefined) {\n                    let res = stretchNode(childNode, startCoord, allThickness);\n                    endCoord = res[0];\n                    newChildren.push(res[1]);\n                }\n                else {\n                    let res = stretchNode(childNode, endCoord, 0);\n                    newChildren.push(res[1]);\n                }\n            }\n        }\n        let newThickness = (endCoord - startCoord) * thicknessFraction;\n        return [endCoord - newThickness, Object.assign(Object.assign({}, node), { thickness: newThickness, nextLevelNodes: newChildren })];\n    });\n    return topLevelNodes.map((node) => stretchNode(node, 0, 0)[1]);\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n    let rects = [];\n    const processNode = cacheable((node, levelCoord, stackDepth) => buildEntryKey(node), (node, levelCoord, stackDepth) => {\n        let rect = Object.assign(Object.assign({}, node), { levelCoord,\n            stackDepth, stackForward: 0 });\n        rects.push(rect);\n        return (rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1);\n    });\n    function processNodes(nodes, levelCoord, stackDepth) {\n        let stackForward = 0;\n        for (let node of nodes) {\n            stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n        }\n        return stackForward;\n    }\n    processNodes(topLevelNodes, 0, 0);\n    return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n    const cache = {};\n    return (...args) => {\n        let key = keyFunc(...args);\n        return (key in cache)\n            ? cache[key]\n            : (cache[key] = workFunc(...args));\n    };\n}\n\nfunction computeSegVCoords(segs, colDate, slatCoords = null, eventMinHeight = 0) {\n    let vcoords = [];\n    if (slatCoords) {\n        for (let i = 0; i < segs.length; i += 1) {\n            let seg = segs[i];\n            let spanStart = slatCoords.computeDateTop(seg.start, colDate);\n            let spanEnd = Math.max(spanStart + (eventMinHeight || 0), // :(\n            slatCoords.computeDateTop(seg.end, colDate));\n            vcoords.push({\n                start: Math.round(spanStart),\n                end: Math.round(spanEnd), //\n            });\n        }\n    }\n    return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords, // might not have for every seg\neventOrderStrict, eventMaxStack) {\n    let segInputs = [];\n    let dumbSegs = []; // segs without coords\n    for (let i = 0; i < segs.length; i += 1) {\n        let vcoords = segVCoords[i];\n        if (vcoords) {\n            segInputs.push({\n                index: i,\n                thickness: 1,\n                span: vcoords,\n            });\n        }\n        else {\n            dumbSegs.push(segs[i]);\n        }\n    }\n    let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack);\n    let segPlacements = [];\n    for (let segRect of segRects) {\n        segPlacements.push({\n            seg: segs[segRect.index],\n            rect: segRect,\n        });\n    }\n    for (let dumbSeg of dumbSegs) {\n        segPlacements.push({ seg: dumbSeg, rect: null });\n    }\n    return { segPlacements, hiddenGroups };\n}\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n    hour: 'numeric',\n    minute: '2-digit',\n    meridiem: false,\n});\nclass TimeColEvent extends BaseComponent {\n    render() {\n        return (createElement(StandardEvent, Object.assign({}, this.props, { elClasses: [\n                'fc-timegrid-event',\n                'fc-v-event',\n                this.props.isShort && 'fc-timegrid-event-short',\n            ], defaultTimeFormat: DEFAULT_TIME_FORMAT })));\n    }\n}\n\nclass TimeCol extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.sortEventSegs = memoize(sortEventSegs);\n    }\n    // TODO: memoize event-placement?\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let isSelectMirror = options.selectMirror;\n        let mirrorSegs = // yuck\n         (props.eventDrag && props.eventDrag.segs) ||\n            (props.eventResize && props.eventResize.segs) ||\n            (isSelectMirror && props.dateSelectionSegs) ||\n            [];\n        let interactionAffectedInstances = // TODO: messy way to compute this\n         (props.eventDrag && props.eventDrag.affectedInstances) ||\n            (props.eventResize && props.eventResize.affectedInstances) ||\n            {};\n        let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder);\n        return (createElement(DayCellContainer, { elTag: \"td\", elRef: props.elRef, elClasses: [\n                'fc-timegrid-col',\n                ...(props.extraClassNames || []),\n            ], elAttrs: Object.assign({ role: 'gridcell' }, props.extraDataAttrs), date: props.date, dateProfile: props.dateProfile, todayRange: props.todayRange, extraRenderProps: props.extraRenderProps }, (InnerContent) => (createElement(\"div\", { className: \"fc-timegrid-col-frame\" },\n            createElement(\"div\", { className: \"fc-timegrid-col-bg\" },\n                this.renderFillSegs(props.businessHourSegs, 'non-business'),\n                this.renderFillSegs(props.bgEventSegs, 'bg-event'),\n                this.renderFillSegs(props.dateSelectionSegs, 'highlight')),\n            createElement(\"div\", { className: \"fc-timegrid-col-events\" }, this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)),\n            createElement(\"div\", { className: \"fc-timegrid-col-events\" }, this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))),\n            createElement(\"div\", { className: \"fc-timegrid-now-indicator-container\" }, this.renderNowIndicator(props.nowIndicatorSegs)),\n            hasCustomDayCellContent(options) && (createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-timegrid-col-misc'] }))))));\n    }\n    renderFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n        let { props } = this;\n        if (props.forPrint) {\n            return renderPlainFgSegs(sortedFgSegs, props);\n        }\n        return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n    }\n    renderPositionedFgSegs(segs, // if not mirror, needs to be sorted\n    segIsInvisible, isDragging, isResizing, isDateSelecting) {\n        let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options;\n        let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props;\n        let isMirror = isDragging || isResizing || isDateSelecting;\n        let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n        let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack);\n        return (createElement(Fragment, null,\n            this.renderHiddenGroups(hiddenGroups, segs),\n            segPlacements.map((segPlacement) => {\n                let { seg, rect } = segPlacement;\n                let instanceId = seg.eventRange.instance.instanceId;\n                let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n                let vStyle = computeSegVStyle(rect && rect.span);\n                let hStyle = (!isMirror && rect) ? this.computeSegHStyle(rect) : { left: 0, right: 0 };\n                let isInset = Boolean(rect) && rect.stackForward > 0;\n                let isShort = Boolean(rect) && (rect.span.end - rect.span.start) < eventShortHeight; // look at other places for this problem\n                return (createElement(\"div\", { className: 'fc-timegrid-event-harness' +\n                        (isInset ? ' fc-timegrid-event-harness-inset' : ''), key: instanceId, style: Object.assign(Object.assign({ visibility: isVisible ? '' : 'hidden' }, vStyle), hStyle) },\n                    createElement(TimeColEvent, Object.assign({ seg: seg, isDragging: isDragging, isResizing: isResizing, isDateSelecting: isDateSelecting, isSelected: instanceId === eventSelection, isShort: isShort }, getSegMeta(seg, todayRange, nowDate)))));\n            })));\n    }\n    // will already have eventMinHeight applied because segInputs already had it\n    renderHiddenGroups(hiddenGroups, segs) {\n        let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props;\n        return (createElement(Fragment, null, hiddenGroups.map((hiddenGroup) => {\n            let positionCss = computeSegVStyle(hiddenGroup.span);\n            let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n            return (createElement(TimeColMoreLink, { key: buildIsoString(computeEarliestSegStart(hiddenSegs)), hiddenSegs: hiddenSegs, top: positionCss.top, bottom: positionCss.bottom, extraDateSpan: extraDateSpan, dateProfile: dateProfile, todayRange: todayRange, nowDate: nowDate, eventSelection: eventSelection, eventDrag: eventDrag, eventResize: eventResize }));\n        })));\n    }\n    renderFillSegs(segs, fillType) {\n        let { props, context } = this;\n        let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n        let children = segVCoords.map((vcoords, i) => {\n            let seg = segs[i];\n            return (createElement(\"div\", { key: buildEventRangeKey(seg.eventRange), className: \"fc-timegrid-bg-harness\", style: computeSegVStyle(vcoords) }, fillType === 'bg-event' ?\n                createElement(BgEvent, Object.assign({ seg: seg }, getSegMeta(seg, props.todayRange, props.nowDate))) :\n                renderFill(fillType)));\n        });\n        return createElement(Fragment, null, children);\n    }\n    renderNowIndicator(segs) {\n        let { slatCoords, date } = this.props;\n        if (!slatCoords) {\n            return null;\n        }\n        return segs.map((seg, i) => (createElement(NowIndicatorContainer\n        // key doesn't matter. will only ever be one\n        , { \n            // key doesn't matter. will only ever be one\n            key: i, elClasses: ['fc-timegrid-now-indicator-line'], elStyle: {\n                top: slatCoords.computeDateTop(seg.start, date),\n            }, isAxis: false, date: date })));\n    }\n    computeSegHStyle(segHCoords) {\n        let { isRtl, options } = this.context;\n        let shouldOverlap = options.slotEventOverlap;\n        let nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n        let farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n        let left; // amount of space from left edge, a fraction of the total width\n        let right; // amount of space from right edge, a fraction of the total width\n        if (shouldOverlap) {\n            // double the width, but don't go beyond the maximum forward coordinate (1.0)\n            farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n        }\n        if (isRtl) {\n            left = 1 - farCoord;\n            right = nearCoord;\n        }\n        else {\n            left = nearCoord;\n            right = 1 - farCoord;\n        }\n        let props = {\n            zIndex: segHCoords.stackDepth + 1,\n            left: left * 100 + '%',\n            right: right * 100 + '%',\n        };\n        if (shouldOverlap && !segHCoords.stackForward) {\n            // add padding to the edge so that forward stacked events don't cover the resizer's icon\n            props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n        }\n        return props;\n    }\n}\nfunction renderPlainFgSegs(sortedFgSegs, { todayRange, nowDate, eventSelection, eventDrag, eventResize }) {\n    let hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) ||\n        (eventResize ? eventResize.affectedInstances : null) ||\n        {};\n    return (createElement(Fragment, null, sortedFgSegs.map((seg) => {\n        let instanceId = seg.eventRange.instance.instanceId;\n        return (createElement(\"div\", { key: instanceId, style: { visibility: hiddenInstances[instanceId] ? 'hidden' : '' } },\n            createElement(TimeColEvent, Object.assign({ seg: seg, isDragging: false, isResizing: false, isDateSelecting: false, isSelected: instanceId === eventSelection, isShort: false }, getSegMeta(seg, todayRange, nowDate)))));\n    })));\n}\nfunction computeSegVStyle(segVCoords) {\n    if (!segVCoords) {\n        return { top: '', bottom: '' };\n    }\n    return {\n        top: segVCoords.start,\n        bottom: -segVCoords.end,\n    };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n    return segEntries.map((segEntry) => allSegs[segEntry.index]);\n}\n\nclass TimeColsContent extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.splitFgEventSegs = memoize(splitSegsByCol);\n        this.splitBgEventSegs = memoize(splitSegsByCol);\n        this.splitBusinessHourSegs = memoize(splitSegsByCol);\n        this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n        this.splitDateSelectionSegs = memoize(splitSegsByCol);\n        this.splitEventDrag = memoize(splitInteractionByCol);\n        this.splitEventResize = memoize(splitInteractionByCol);\n        this.rootElRef = createRef();\n        this.cellElRefs = new RefMap();\n    }\n    render() {\n        let { props, context } = this;\n        let nowIndicatorTop = context.options.nowIndicator &&\n            props.slatCoords &&\n            props.slatCoords.safeComputeTop(props.nowDate); // might return void\n        let colCnt = props.cells.length;\n        let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n        let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n        let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n        let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n        let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n        let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n        let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n        return (createElement(\"div\", { className: \"fc-timegrid-cols\", ref: this.rootElRef },\n            createElement(\"table\", { role: \"presentation\", style: {\n                    minWidth: props.tableMinWidth,\n                    width: props.clientWidth,\n                } },\n                props.tableColGroupNode,\n                createElement(\"tbody\", { role: \"presentation\" },\n                    createElement(\"tr\", { role: \"row\" },\n                        props.axis && (createElement(\"td\", { \"aria-hidden\": true, className: \"fc-timegrid-col fc-timegrid-axis\" },\n                            createElement(\"div\", { className: \"fc-timegrid-col-frame\" },\n                                createElement(\"div\", { className: \"fc-timegrid-now-indicator-container\" }, typeof nowIndicatorTop === 'number' && (createElement(NowIndicatorContainer, { elClasses: ['fc-timegrid-now-indicator-arrow'], elStyle: { top: nowIndicatorTop }, isAxis: true, date: props.nowDate })))))),\n                        props.cells.map((cell, i) => (createElement(TimeCol, { key: cell.key, elRef: this.cellElRefs.createRef(cell.key), dateProfile: props.dateProfile, date: cell.date, nowDate: props.nowDate, todayRange: props.todayRange, extraRenderProps: cell.extraRenderProps, extraDataAttrs: cell.extraDataAttrs, extraClassNames: cell.extraClassNames, extraDateSpan: cell.extraDateSpan, fgEventSegs: fgEventSegsByRow[i], bgEventSegs: bgEventSegsByRow[i], businessHourSegs: businessHourSegsByRow[i], nowIndicatorSegs: nowIndicatorSegsByRow[i], dateSelectionSegs: dateSelectionSegsByRow[i], eventDrag: eventDragByRow[i], eventResize: eventResizeByRow[i], slatCoords: props.slatCoords, eventSelection: props.eventSelection, forPrint: props.forPrint }))))))));\n    }\n    componentDidMount() {\n        this.updateCoords();\n    }\n    componentDidUpdate() {\n        this.updateCoords();\n    }\n    updateCoords() {\n        let { props } = this;\n        if (props.onColCoords &&\n            props.clientWidth !== null // means sizing has stabilized\n        ) {\n            props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, // horizontal\n            false));\n        }\n    }\n}\nfunction collectCellEls(elMap, cells) {\n    return cells.map((cell) => elMap[cell.key]);\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\nclass TimeCols extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.processSlotOptions = memoize(processSlotOptions);\n        this.state = {\n            slatCoords: null,\n        };\n        this.handleRootEl = (el) => {\n            if (el) {\n                this.context.registerInteractiveComponent(this, {\n                    el,\n                    isHitComboAllowed: this.props.isHitComboAllowed,\n                });\n            }\n            else {\n                this.context.unregisterInteractiveComponent(this);\n            }\n        };\n        this.handleScrollRequest = (request) => {\n            let { onScrollTopRequest } = this.props;\n            let { slatCoords } = this.state;\n            if (onScrollTopRequest && slatCoords) {\n                if (request.time) {\n                    let top = slatCoords.computeTimeTop(request.time);\n                    top = Math.ceil(top); // zoom can give weird floating-point values. rather scroll a little bit further\n                    if (top) {\n                        top += 1; // to overcome top border that slots beyond the first have. looks better\n                    }\n                    onScrollTopRequest(top);\n                }\n                return true;\n            }\n            return false;\n        };\n        this.handleColCoords = (colCoords) => {\n            this.colCoords = colCoords;\n        };\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n            if (this.props.onSlatCoords) {\n                this.props.onSlatCoords(slatCoords);\n            }\n        };\n    }\n    render() {\n        let { props, state } = this;\n        return (createElement(\"div\", { className: \"fc-timegrid-body\", ref: this.handleRootEl, style: {\n                // these props are important to give this wrapper correct dimensions for interactions\n                // TODO: if we set it here, can we avoid giving to inner tables?\n                width: props.clientWidth,\n                minWidth: props.tableMinWidth,\n            } },\n            createElement(TimeColsSlats, { axis: props.axis, dateProfile: props.dateProfile, slatMetas: props.slatMetas, clientWidth: props.clientWidth, minHeight: props.expandRows ? props.clientHeight : '', tableMinWidth: props.tableMinWidth, tableColGroupNode: props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */, onCoords: this.handleSlatCoords }),\n            createElement(TimeColsContent, { cells: props.cells, axis: props.axis, dateProfile: props.dateProfile, businessHourSegs: props.businessHourSegs, bgEventSegs: props.bgEventSegs, fgEventSegs: props.fgEventSegs, dateSelectionSegs: props.dateSelectionSegs, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, todayRange: props.todayRange, nowDate: props.nowDate, nowIndicatorSegs: props.nowIndicatorSegs, clientWidth: props.clientWidth, tableMinWidth: props.tableMinWidth, tableColGroupNode: props.tableColGroupNode, slatCoords: state.slatCoords, onColCoords: this.handleColCoords, forPrint: props.forPrint })));\n    }\n    componentDidMount() {\n        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    }\n    componentDidUpdate(prevProps) {\n        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n    }\n    componentWillUnmount() {\n        this.scrollResponder.detach();\n    }\n    queryHit(positionLeft, positionTop) {\n        let { dateEnv, options } = this.context;\n        let { colCoords } = this;\n        let { dateProfile } = this.props;\n        let { slatCoords } = this.state;\n        let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration);\n        let colIndex = colCoords.leftToIndex(positionLeft);\n        let slatIndex = slatCoords.positions.topToIndex(positionTop);\n        if (colIndex != null && slatIndex != null) {\n            let cell = this.props.cells[colIndex];\n            let slatTop = slatCoords.positions.tops[slatIndex];\n            let slatHeight = slatCoords.positions.getHeight(slatIndex);\n            let partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n            let localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n            let snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n            let dayDate = this.props.cells[colIndex].date;\n            let time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n            let start = dateEnv.add(dayDate, time);\n            let end = dateEnv.add(start, snapDuration);\n            return {\n                dateProfile,\n                dateSpan: Object.assign({ range: { start, end }, allDay: false }, cell.extraDateSpan),\n                dayEl: colCoords.els[colIndex],\n                rect: {\n                    left: colCoords.lefts[colIndex],\n                    right: colCoords.rights[colIndex],\n                    top: slatTop,\n                    bottom: slatTop + slatHeight,\n                },\n                layer: 0,\n            };\n        }\n        return null;\n    }\n}\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n    let snapDuration = snapDurationOverride || slotDuration;\n    let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n    if (snapsPerSlot === null) {\n        snapDuration = slotDuration;\n        snapsPerSlot = 1;\n        // TODO: say warning?\n    }\n    return { snapDuration, snapsPerSlot };\n}\n\nclass DayTimeColsSlicer extends Slicer {\n    sliceRange(range, dayRanges) {\n        let segs = [];\n        for (let col = 0; col < dayRanges.length; col += 1) {\n            let segRange = intersectRanges(range, dayRanges[col]);\n            if (segRange) {\n                segs.push({\n                    start: segRange.start,\n                    end: segRange.end,\n                    isStart: segRange.start.valueOf() === range.start.valueOf(),\n                    isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                    col,\n                });\n            }\n        }\n        return segs;\n    }\n}\n\nclass DayTimeCols extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.buildDayRanges = memoize(buildDayRanges);\n        this.slicer = new DayTimeColsSlicer();\n        this.timeColsRef = createRef();\n    }\n    render() {\n        let { props, context } = this;\n        let { dateProfile, dayTableModel } = props;\n        let isNowIndicator = context.options.nowIndicator;\n        let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n        // give it the first row of cells\n        // TODO: would move this further down hierarchy, but sliceNowDate needs it\n        return (createElement(NowTimer, { unit: isNowIndicator ? 'minute' : 'day' }, (nowDate, todayRange) => (createElement(TimeCols, Object.assign({ ref: this.timeColsRef }, this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), { forPrint: props.forPrint, axis: props.axis, dateProfile: dateProfile, slatMetas: props.slatMetas, slotDuration: props.slotDuration, cells: dayTableModel.cells[0], tableColGroupNode: props.tableColGroupNode, tableMinWidth: props.tableMinWidth, clientWidth: props.clientWidth, clientHeight: props.clientHeight, expandRows: props.expandRows, nowDate: nowDate, nowIndicatorSegs: isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges), todayRange: todayRange, onScrollTopRequest: props.onScrollTopRequest, onSlatCoords: props.onSlatCoords })))));\n    }\n}\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n    let ranges = [];\n    for (let date of dayTableModel.headerDates) {\n        ranges.push({\n            start: dateEnv.add(date, dateProfile.slotMinTime),\n            end: dateEnv.add(date, dateProfile.slotMaxTime),\n        });\n    }\n    return ranges;\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n    { hours: 1 },\n    { minutes: 30 },\n    { minutes: 15 },\n    { seconds: 30 },\n    { seconds: 15 },\n];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n    let dayStart = new Date(0);\n    let slatTime = slotMinTime;\n    let slatIterator = createDuration(0);\n    let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n    let metas = [];\n    while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n        let date = dateEnv.add(dayStart, slatTime);\n        let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n        metas.push({\n            date,\n            time: slatTime,\n            key: date.toISOString(),\n            isoTimeStr: formatIsoTimeString(date),\n            isLabeled,\n        });\n        slatTime = addDurations(slatTime, slotDuration);\n        slatIterator = addDurations(slatIterator, slotDuration);\n    }\n    return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n    let i;\n    let labelInterval;\n    let slotsPerLabel;\n    // find the smallest stock label interval that results in more than one slots-per-label\n    for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n        labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n        slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n        if (slotsPerLabel !== null && slotsPerLabel > 1) {\n            return labelInterval;\n        }\n    }\n    return slotDuration; // fall back\n}\n\nclass DayTimeColsView extends TimeColsView {\n    constructor() {\n        super(...arguments);\n        this.buildTimeColsModel = memoize(buildTimeColsModel);\n        this.buildSlatMetas = memoize(buildSlatMetas);\n    }\n    render() {\n        let { options, dateEnv, dateProfileGenerator } = this.context;\n        let { props } = this;\n        let { dateProfile } = props;\n        let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n        let splitProps = this.allDaySplitter.splitProps(props);\n        let slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n        let { dayMinWidth } = options;\n        let hasAttachedAxis = !dayMinWidth;\n        let hasDetachedAxis = dayMinWidth;\n        let headerContent = options.dayHeaders && (createElement(DayHeader, { dates: dayTableModel.headerDates, dateProfile: dateProfile, datesRepDistinctDays: true, renderIntro: hasAttachedAxis ? this.renderHeadAxis : null }));\n        let allDayContent = (options.allDaySlot !== false) && ((contentArg) => (createElement(DayTable, Object.assign({}, splitProps.allDay, { dateProfile: dateProfile, dayTableModel: dayTableModel, nextDayThreshold: options.nextDayThreshold, tableMinWidth: contentArg.tableMinWidth, colGroupNode: contentArg.tableColGroupNode, renderRowIntro: hasAttachedAxis ? this.renderTableRowAxis : null, showWeekNumbers: false, expandRows: false, headerAlignElRef: this.headerElRef, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, forPrint: props.forPrint }, this.getAllDayMaxEventProps()))));\n        let timeGridContent = (contentArg) => (createElement(DayTimeCols, Object.assign({}, splitProps.timed, { dayTableModel: dayTableModel, dateProfile: dateProfile, axis: hasAttachedAxis, slotDuration: options.slotDuration, slatMetas: slatMetas, forPrint: props.forPrint, tableColGroupNode: contentArg.tableColGroupNode, tableMinWidth: contentArg.tableMinWidth, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, onSlatCoords: this.handleSlatCoords, expandRows: contentArg.expandRows, onScrollTopRequest: this.handleScrollTopRequest })));\n        return hasDetachedAxis\n            ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords)\n            : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n    }\n}\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n    let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n    return new DayTableModel(daySeries, false);\n}\n\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}